name: Docker image deployment process in IBM Cloud Code Engine

on:
  workflow_call:
    inputs:
      container_registry_namespace:
        default: community-digital
        required: false
        type: string
      code_engine_project:
        required: true
        type: string
      code_engine_registry_secret:
        default: ibm-container-registry
        required: false
        type: string
      docker_image_name:
        required: true
        type: string
      docker_image_port:
        default: "8080"
        required: false
        type: string
      ibmcloud_region:
        default: us-south
        required: false
        type: string
      ibmcloud_resource_group:
        default: Quantum Community
        required: false
        type: string
    secrets:
      ibmcloud_account:
        required: true
      ibmcloud_api_key:
        required: true
      ibmid_client_id:
        required: false
      ibmid_client_secret:
        required: false
      mongodb_uri:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PR_TAG: pr-${{ github.event.pull_request.number }}

    steps:
      - name: Create APP_NAME and DOCKER_IMAGE_TAG env variables
        run: |
          echo "APP_NAME=${{ inputs.docker_image_name }}-${{ env.PR_TAG }}" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_TAG=icr.io/${{ inputs.container_registry_namespace }}/${{ inputs.docker_image_name }}:${{ env.PR_TAG }}" >> $GITHUB_ENV

      - name: Fetch content of the PR
        uses: actions/checkout@v3

      - name: GH deployment status (start)
        id: gh_deployment
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ github.token }}
          env: preview-${{ env.PR_TAG }}
          auto_inactive: true
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup IBM Cloud CLI
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud --version
          ibmcloud config --check-version=false
          ibmcloud plugin install -f code-engine
          ibmcloud plugin install -f container-registry

      - name: Authenticate with IBM Cloud CLI
        run: |
          ibmcloud login -g "${{ inputs.ibmcloud_resource_group }}" -r "${{ inputs.ibmcloud_region }}" -c "${{ secrets.ibmcloud_account }}" --apikey "${{ secrets.ibmcloud_api_key }}"

      - name: Remove previous Docker image (if exists)
        run: |
          ibmcloud cr region-set global
          if ibmcloud cr image-list | grep "${{ inputs.docker_image_name }}" | grep "${{ env.PR_TAG }}" ; then
            ibmcloud cr image-rm "${{ env.DOCKER_IMAGE_TAG }}"
          else
            echo "no image to remove"
          fi

      - name: Log-in into IBM Container Registry
        uses: docker/login-action@v2
        with:
          registry: icr.io
          username: iamapikey
          password: ${{ secrets.ibmcloud_api_key }}

      - name: Build and push to IBM registry for a simple project
        if: github.repository != 'Qiskit/platypus'
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_TAG }}
          cache-to: type=inline

      - name: Build and push to IBM registry for platypus
        if: github.repository == 'Qiskit/platypus'
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_TAG }}
          cache-to: type=inline
          build-args: |
            IBMID_CLIENT_ID=${{ secrets.ibmid_client_id }}
            IBMID_CLIENT_SECRET=${{ secrets.ibmid_client_secret }}
            MONGODB_URI=${{ secrets.mongodb_uri }}

      - name: Determine Code Engine project and app status
        id: ce_command_choice
        run: |
          ibmcloud ce project select -n "${{ inputs.code_engine_project }}"
          if ibmcloud ce app list -q | grep "${{ env.APP_NAME }}" ; then
            echo "::set-output name=command::update"
          else
            echo "::set-output name=command::create"
          fi

      - name: Create a new preview application in Code Engine
        id: ce_app_creation
        run: |
          ibmcloud ce app ${{ steps.ce_command_choice.outputs.command }} \
            --name "${{ env.APP_NAME }}" \
            --image "${{ env.DOCKER_IMAGE_TAG }}" \
            --registry-secret "${{ inputs.code_engine_registry_secret }}" \
            --port "${{ inputs.docker_image_port }}" \
            --cpu 0.25 \
            --memory 0.5G \
            --min 1
          echo "::set-output name=preview_url::$(\
            ibmcloud ce app get --name "${{ env.APP_NAME }}" --output url
          )"

      - name: GH deployment status (finish)
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ github.token }}
          env: ${{ steps.gh_deployment.outputs.env }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.gh_deployment.outputs.deployment_id }}
          env_url: ${{ steps.ce_app_creation.outputs.preview_url }}
